{"version":3,"file":"static/js/913.b3389530.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/ccount/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/devlop/lib/default.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/esm/index.mjs","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/react-markdown/lib/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/handle/break.js","../node_modules/mdast-util-to-markdown/lib/handle/code.js","../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../node_modules/mdast-util-to-markdown/lib/handle/html.js","../node_modules/mdast-util-to-markdown/lib/handle/image.js","../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../node_modules/mdast-util-to-markdown/lib/handle/link.js","../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../node_modules/mdast-util-phrasing/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../node_modules/mdast-util-to-markdown/lib/handle/index.js","../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../node_modules/longest-streak/index.js","../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../node_modules/mdast-util-to-markdown/lib/handle/list.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../node_modules/mdast-util-to-markdown/lib/handle/root.js","../node_modules/mdast-util-to-markdown/lib/handle/text.js","../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/remark-gfm/lib/index.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/mdast-util-gfm/lib/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","import parse from 'inline-style-parser';\nimport type { Declaration } from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","// Register MDX nodes in mdast:\n/// <reference types=\"mdast-util-mdx-expression\" />\n/// <reference types=\"mdast-util-mdx-jsx\" />\n/// <reference types=\"mdast-util-mdxjs-esm\" />\n\n/**\n * @typedef {import('estree').Identifier} Identifier\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree').MemberExpression} MemberExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @callback CreateEvaluater\n *   Create an evaluator that turns ESTree ASTs from embedded MDX into values.\n * @returns {Evaluater}\n *   Evaluater.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback EvaluateExpression\n *   Turn an MDX expression into a value.\n * @param {Expression} expression\n *   ESTree expression.\n * @returns {unknown}\n *   Result of expression.\n *\n * @callback EvaluateProgram\n *   Turn an MDX program (export/import statements) into a value.\n * @param {Program} expression\n *   ESTree program.\n * @returns {unknown}\n *   Result of program;\n *   should likely be `undefined` as ESM changes the scope but doesn’t yield\n *   something.\n *\n * @typedef Evaluater\n *   Evaluator that turns ESTree ASTs from embedded MDX into values.\n * @property {EvaluateExpression} evaluateExpression\n *   Evaluate an expression.\n * @property {EvaluateProgram} evaluateProgram\n *   Evaluate a program.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | MdxJsxFlowElement | MdxJsxTextElement | undefined, [prop: string]: Array<Child> | Child | Element | MdxJsxFlowElement | MdxJsxTextElement | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {CreateEvaluater | null | undefined} [createEvaluater]\n *   Create an evaluator that turns ESTree ASTs into values (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Evaluater | undefined} evaluater\n *   Evaluator that turns ESTree ASTs into values.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsm} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    // @ts-expect-error: `style-to-object` types are broken.\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push[...newElements]` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      events.splice(index + 1, token.type === \"labelImage\" ? 4 : 2);\n      token.type = \"data\";\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: \"label\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: \"labelText\",\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(options || destination)})\n    )\n  }\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push([...events]);\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      events.push(...slice);\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","inline_style_parser_1","__importDefault","require","iterator","styleObject","default","hasIterator","forEach","env","self","globalThis","deserialize","serialized","deserializer","$","_","as","out","index","set","unpair","has","get","object","Date","flags","RegExp","map","Map","Set","add","message","BigInt","EMPTY","keys","typeOf","asString","includes","shouldSkip","_ref","TYPE","serialize","json","lossy","undefined","serializer","strict","pair","entry","valueOf","toJSON","entries","toISOString","structuredClone","any","ccount","character","String","count","indexOf","parse","tokens","input","token","stringify","values","settings","join","padRight","padLeft","element","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","charCodeAt","ok","unreachable","thing","empty","emptyOptions","one","includeImageAlt","includeHtml","Boolean","alt","all","children","result","blankLine","tokenize","effects","nok","code","markdownSpace","factorySpace","after","markdownLineEnding","partial","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","splice","list","remove","items","parameters","chunkStart","from","unshift","classifyCharacter","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","constructs","existing","before","normalizeIdentifier","toLowerCase","toUpperCase","resolveAll","events","context","called","resolve","Schema","normal","space","merge","definitions","assign","own","create","definition","properties","info","DefinedInfo","transform","attributes","mustUseProperty","normalize","attribute","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","booleanish","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","number","ariaColIndex","ariaColSpan","ariaControls","spaceSeparated","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","commaSeparated","acceptCharset","accessKey","action","allow","allowFullScreen","boolean","allowPaymentRequest","allowUserMedia","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","overloadedBoolean","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","commaOrSpaceSeparated","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","mask","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","find","schema","Type","Info","rest","camelcase","dashes","kebab","$0","checks","types","super","mark","check","defined","powers","increment","nameRe","nameReJsx","jsx","hastToReact","StyleToObject","emptyMap","dashSomething","tableElements","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","point","pointStart","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","ancestors","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","stylePropertyNameCase","tableCellAlignToStyle","parentSchema","tagName","findComponentFromName","alignValue","createProperty","createElementProps","createChildren","child","addNode","addChildren","pop","estree","expression","body","assert","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","isNaN","commas","spaces","styleToObject","replacer","cause","VFileMessage","ruleId","file","url","toCamel","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","optional","place","toDash","$1","urlAttributes","icon","SpliceBuffer","initial","RangeError","shift","setCursor","stop","reverse","concat","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","contentStart","attempt","contentInitial","lineStart","stack","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","stringifyPosition","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","defaultConstructs","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","suffix","contents","listItemLoose","tab","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","parent","loose","listLoose","table","firstRow","tableContent","pointEnd","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","visit","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","unified","VFile","deprecation","mdastTree","runSync","colon","questionMark","numberSign","findAndReplace","ignored","convert","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","parents","grandparent","change","matchObject","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","protocol","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","tracker","createTracker","move","subexit","safe","associationId","indentLines","containerFlow","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","unsafe","checkQuote","quote","checkEmphasis","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","fence","checkFence","fences","formatCodeAsIndented","repeat","substring","expected","longestStreak","encode","rank","literalWithBreak","EXIT","setext","formatHeadingAsSetext","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImplementation","sort","a","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfm","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","_len","_key","middlewareIndex","callback","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","apply","then","_len4","_key4","middelware","CallableInstance","proto","func","setPrototypeOf","names","getOwnPropertyNames","p","descriptor","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","isUint8Array","processSync","complete","assertDone","assertNode","outputTree","resultingTree","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","asyncName","looksLikeAVFile","castFactory","tests","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","SKIP","factory","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","causeOrReason","optionsOrParentOrPlace","legacyCause","fatal","actual","note","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","proc","cwd","isUrl","fileUrlOrPath","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part"],"sourceRoot":""}